services:
  api: &main_app
    build:
      context: .
      dockerfile: ./Dockerfile
    image: app:${APP_VERSION:-latest}
    ports:
      - "${APP_PORT:-8000}:8000"
    restart: always
    volumes:
      - .:/app/src/
    env_file:
      - .env
    labels:
      # Enables traefik for this container.
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`${APP_TRAEFIK_HOST:-app.localhost}`)
      - traefik.http.routers.app.entrypoints=http
      - traefik.http.routers.app.service=app
      - traefik.http.services.app.loadbalancer.server.port=${APP_PORT:-8000}
    networks:
      - default
      - traefik-shared
    depends_on:
      db:
        condition: service_healthy
    environment:
      APP_HOST: ${APP_HOST:-0.0.0.0}
      APP_DB_HOST: ${APP_DB_HOST:-app-db}
      APP_DB_PORT: ${APP_DB_PORT:-5432}
      APP_DB_USER: ${APP_DB_USER:-app}
      APP_DB_PASS: ${APP_DB_PASS:-app}
      APP_DB_BASE: ${APP_DB_BASE:-app}
      APP_GEMINI_KEY: $(APP_GEMINI_KEY)

  db:
    image: postgres:16.3-bullseye
    hostname: ${APP_DB_HOST_NAME:-app-db}
    environment:
      POSTGRES_USER: ${APP_DB_USER:-app}
      POSTGRES_PASSWORD: ${APP_DB_PASS:-app}
      POSTGRES_DB: ${APP_DB_BASE:-app}
    volumes:
      - app-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U app
      interval: 2s
      timeout: 3s
      retries: 40

volumes:
  app-db-data:
    name: app-db-data

networks:
  # Network for traefik.
  traefik-shared:
    name: traefik-shared
